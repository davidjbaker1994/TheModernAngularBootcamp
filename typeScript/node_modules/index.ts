const myName: string = 'Stephen';
//Means we only ever expect myName to be assigned a variable of type 'string'

    //': string' - type annotation

//more types

const ten: number = 10;

const negative: number = -10000;

const decimal: number = 10.00000001;

const yes: boolean = true;

const nothingHere: null = null;

const noDefinition: undefined = undefined;

/*In production typescript code, it is actually uncommon to see 
"variable-type notation" as seen in the above syntax

//Explained further below

let myName = 'Stephen';
                            Typescript throws error because it assumes myName will only ever be of type 'string'
                            this is known as Type Inference
myName = 10;
*/

/*Corner Cases 

1. Typescript doesn't look ahead to infer type
let myName: string;

if (1 === 1) j{
    myName = 'Stephen'
} else {
    myName = 'jfaeedfe'
}

Why TypeScript At All?

Typescript knows about all the properties and methods of all the basic types in javascript,
and obviously helps you dramatically in error checking in development
*/
